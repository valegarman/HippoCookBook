function [patterns, activities] = detectCellAssemblies(varargin)
% Detect cell assemblies
% 
% INPUTS
%
% spikemat              Spike matrix. Rows represent neurons, columns time
%                       bins. Each element of the matrix carries the spike
%                       count of a given neuron at a given time bin.
%
% <optional>
% 'basepath'            Default pwd
% 'saveSummary'         Default true
% 'saveMat'             Detault true
% 'force'               Default false
% 'dt'                  bin size. Deafult 25 ms (0.025 s)
%  'win'       [start stop] time interval of the recording in which 
%                   to get spike matrix (default: [0 Inf])
% 'restrict_to'
%
% 'threshold_method'              Defines the method to compute the threshold
%                       assembly detection. Options:
%                       - 'MarcenkoPastur': uses the analytical bound
%                       - 'binshuffling' : estimate eigen value
%                       distribution independent activity of from
%                       surrogate matrices generated by shuffling time bins
%                       - 'circularshift': estimate eigen value
%                       distribution for independent ctivity from
%                       surrogatematrices generated by random circular
%                       shifts of original spike matrix.
%
% 'permutations_percentile': Defines wich percentile of the surrogate
%                           distribution of maximal eigenvalues is used a statistical threshold. It
%                           must be a number between 0 and 100 (95 or larger recommended). Not use
%                           when 'MarcenkoPasteur' is chosen.
% 
% 'number_of_permutations':   Defines how manu surrgoate matrices are generated
%                           (100 or more recommended). Not use
%                           when 'MarcenkoPasteur' is chosen.
% 'method' : defines which method is used to extract cell assembly
%               patterns ('PCA' or 'ICA'; default).
%
% 'number_of_iterations': number of iterations for fast ICA algorihtm (100
%                           or more recommended). Not use when 'PCA' is
%                           used.
%
% OUTPUT
% CA         Cell Assembly output
% Patterns
% Activities
%
% Pablo Abad 2024. Based on Cell-Assembly-Detection.

% ICA- and PCA-based Matlab routines for detecting cell assemblies, 
% as described in Lopes-dos-Santos V, Ribeiro S, Tort AB (2013) 
% Detecting cell assemblies in large neuronal populations. 
% J Neurosci Methods 220(2):149-66. 10.1016/j.jneumeth.2013.04.010
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Parse options
p = inputParser;
addParameter(p,'basepath',pwd,@isstruct);
addParameter(p,'saveSummary',true,@islogical);
addParameter(p,'saveMat',true,@islogical);
addParameter(p,'dt',0.025,@islogical);
addParameter(p,'restrict_to',[]);
addParameter(p,'win',[]);
addParameter(p,'threshold_method','MarcenkoPastur');
addParameter(p,'permutations_percentile',[]);
addParameter(p,'number_of_permutations',[]);
addParameter(p,'method','ICA');
addParameter(p,'number_of_iterations',500);

parse(p,varargin{:})

basepath = p.Results.basepath;
saveMat = p.Results.saveMat;
saveSummary = p.Results.saveSummary;
dt = p.Results.dt;
threshold_method = p.Results.threshold_method;
permutations_percentile = p.Results.permutations_percentile;
number_of_permutations = p.Results.number_of_permutations;
method = p.Results.method;
number_of_iterations = p.Results.number_of_iterations;

% Deal with inputs
prevBasepath = pwd;
cd(basepath);

% Parameters
opts.threshold.method = threshold_method;
opts.Patterns.method = method;
opts.Patterns.number_of_iterations = number_of_iterations;

% colormap
colorMap = [5 48 97; 33 102 172; 67 147 195; 146 197 222; 209 229 240; 247 247 247; 253 219 199; 244 165 130; 214 96 77; 178 24 43; 103 0 31] / 255;

% load spikes
spikes = loadSpikes();

% Load behavior
file = dir('*behavior.mat');
load(file.name);

% Compute binned matrix
spikemat = bz_SpktToSpkmat(spikes,'dt',dt,'bintype','boxcar','units','counts','win',win);

% z-score rates for each bin
% spikemat.data_zscore = zscore(spikemat.data);

% Detect assemblies
Patterns = assembly_patterns(spikemat.data',opts);

% Find neurons with high contribution (weight exceeding two SD from the mean)
Patterns_sig = zeros(size(Patterns));

for ii = 1:size(Patterns,2)
    Patterns_sig(:,ii) = Patterns(:,ii) > mean(Patterns(:,ii)) + 2*std(Patterns(:,ii));
end

% The correlation matrix of the network can be visualized by running:

correlationmat = corr(spikemat.data);
figure; clf
imagesc(correlationmat(1:10,1:10));
colormap(jet(15))

figure;
subplot(311)
stem([1:size(Patterns,1)],Patterns(:,1),'k','MarkerSize',3,'MarkerFaceColor','k');
hold on;
a = Patterns(:,1);
a(~Patterns_sig(:,1),1) =   NaN;
hold on;
stem([1:size(a)],a(:,1),'r','MarkerSize',3,'MarkerFaceColor','r');

subplot(312)
stem([1:size(Patterns,1)],Patterns(:,2),'k','MarkerSize',3,'MarkerFaceColor','k');
hold on;
a = Patterns(:,2);
a(~Patterns_sig(:,2),1) =   NaN;
hold on;
stem([1:size(a)],a(:,1),'b','MarkerSize',3,'MarkerFaceColor','b');

subplot(313)
stem([1:size(Patterns,1)],Patterns(:,3),'k','MarkerSize',3,'MarkerFaceColor','k');
hold on;
a = Patterns(:,3);
a(~Patterns_sig(:,3),1) =   NaN;
hold on;
stem([1:size(a)],a(:,1),'g','MarkerSize',3,'MarkerFaceColor','g');


% Detect Cell Types that compose each ensemble
for ii = 1:length(Patterns)
    cellAssembly{ii}.putativeCellTypes = cell_metrics.putativeCellType(find(Patterns_sig(:,ii)));
end

% Not computing activity of the ensembles for the moment

% Output
CellAssembly = [];
CellAssembly.patterns = Patterns;
CellAssembly.activity = [];

save('CellAssembly.mat','CellAssembly');

cd(prevBasepath);
end
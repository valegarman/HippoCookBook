%% Notebook_for_checking_processSession_results
% Andrea Gallardo and Manu Valero, 2023

%% 0. Check metadata

session = loadSession;

% Camk10 animal session run these lines.

DigitalIn= getDigitalIn;
Channel = [];
for ii= 5: length(DigitalIn.timestampsOn)
  if ~isempty(DigitalIn.timestampsOn{ii})
      Channel = [Channel ii];
  end 
end
session.analysisTags.digital_optogenetic_channels = Channel;

% All animal session run directly this line
gui_session(session);


%% 1. Optogenetic responses and cell identity
% Check light responses(summary figures) and two things can happen:
% 1. It is not computed yet, then run this code

getOptogeneticResponse('numRep',500,'force',true);

% 2.Two neurons are tagged, but they show a similar waveform and same max channel, they are probably the same cell.
% The only way of fixing this is merging them in Phy!!!!!!! (and then run processSession again) --> important for Interneurons Library

 
 %% 2. Brain state scoring
% Inspect content in StateScoreFigures. Three nice clusters must be visible
% in SSCluster3D.jpg. Otherwise, try following:

% 2. 1 Edit scoring with 
session = loadSession;
TheStateEditor(session.general.name);
% press 'a', click Sticky and move thresholds for improving detections of
% bimodalities. 
% 
% 2.2 If no clear bimodalities are visible, run scoring with different
% channels and include noisy ignoretime epochs
ignoretime = [];
ThetaChannels = [20 46 19 45 21 43]; % choose theta channels (ideally SLM)
SWChannels = [30 36 26]; % choose slow wave channels (ideally superficial cortex)

% if EMG is not been quantified correctly, try discarting channels with
bz_EMGFromLFP(pwd,'rejectChannels',[51 58 52 57 49 60 50 59 54 55 53 56],'overwrite', true);

targetFile = (dir('*optogeneticPulses.events.mat'));
if ~isempty(targetFile)
    pulses = importdata(targetFile.name);
else
    pulses.stimulationEpochs = [];
end
SleepScoreMaster(pwd,'noPrompts',true,'ignoretime',[pulses.stimulationEpochs; ignoretime], 'overwrite', true, 'ThetaChannels', ThetaChannels, 'SWChannels', SWChannels,'rejectChannels',[51 58 52 57 49 60 50 59 54 55 53 56]);

% 2.3 As the last resource, you can edit the epochs in TheStateEditor. IT
% IS NOT WORKING!!!!!
TheStateEditor(session.general.name);

%% 3. Hippocampal layers
% Revise hippocapmal layer definition. Upon disagrements, run again
hippocampalLayers = getHippocampalLayers('force',true,'promt',true);

%% 4. Ripples
% Revise number of ripples, shape and channel. Check ripplesDectection and
% psthRipple file in summary figures.
% You can also specifiy a different trhresold or restrict the shanks for the spikeThreshold
% analysis.
rippleChannel = []; %check it from file.dat and from hippocmpallayer
SWChannel = []; %check it from file.dat and from hippocmpallayer
eventSpikeThreshold_shanks = [1];
rippleMasterDetector_threshold = [1.5 3.5]; % [1.5 3.5]
eventSpikeThreshold = 1; % this is related to the big neuron generated by the activity of all neurons detected
ripples = rippleMasterDetector('rippleChannel',rippleChannel,'SWChannel',SWChannel,'force',true,'skipStimulationPeriods',false,'thresholds',rippleMasterDetector_threshold,'eventSpikeThreshold_shanks', eventSpikeThreshold_shanks,'eventSpikeThreshold',eventSpikeThreshold);
psthRipples = spikesPsth([],'eventType','ripples','numRep',500,'force',true,'minNumberOfPulses',10);
getSpikesRank('events','ripples');

%% 5. Theta epochs
% Revise channel definition, theta band in thetaEpochs.png and cells
% rhytmicity. If bad, you can change useCSD_for_theta_detection to false,
% or change powerThreshold, even the channel
useCSD_for_theta_detection = false;
powerThreshold = 1.2;
channel = [];
thetaEpochs = detectThetaEpochs('force',true,'useCSD',useCSD_for_theta_detection,'powerThreshold',powerThreshold,'channel', channel);

%% 6. Phase modulation
% NOTE!! If you have re-detected ripples or theta, you must run this code
% again with the same channel definition!!!
thetaChannel = [];
[phaseMod] = computePhaseModulation('rippleChannel',rippleChannel,'SWChannel',SWChannel,'thetaChannel',thetaChannel);
computeCofiringModulation;

%% 7. Brain region
% Revise assignBrainRegion output. If disagreements or out of date, run again
assignBrainRegion('showPowerProfile','theta','showEvent','ripples'); % hfo slowOscilations [-.5 .5]

%% 8. Cell metrics
% Basically, if you have change anything above, a good practice is running
% this code again (but unless you merge or discard cells in phy, you donÂ´t
% have to validate the monosynpatic connections again)
session = loadSession;
if ~isempty(dir([session.general.name,'.optogeneticPulses.events.mat']))
    file = dir([session.general.name,'.optogeneticPulses.events.mat']);
    load(file.name);
end
excludeManipulationIntervals = optoPulses.stimulationEpochs;

cell_metrics = ProcessCellMetrics('session', session,'excludeIntervals',excludeManipulationIntervals,'forceReload',true);

getACGPeak('force',true);

getAverageCCG('force',true);
    
getSpikesReturnPlot('force',true);

%% 9. Spatial modulation
% Open session folder with behaviour (with a video, normaly .avi, file). If
% no folder is present, you must run this code. You can play with the
% LED_threshold level (threshold for LED detection), and check if TTL
% channel are well defined. 
session = loadSession;
LED_threshold = 0.98;
spikes = loadSpikes;
leftTtl = session.analysisTags.leftArmTtl_channel;
rightTtl = session.analysisTags.rightArmTtl_channel;

getSessionTracking('roiTracking','manual','forceReload',false,'LED_threshold',LED_threshold);

% only if the animal run a figure-eight maze behavior
% getSessionArmChoice('task','alternation','leftArmTtl_channel',2,'rightArmTtl_channel',3,'homeDelayTtl_channel',4);

behaviour = getSessionLinearize('forceReload',true,'leftTtl',leftTtl,'rightTtl',rightTtl); 
firingMaps = bz_firingMapAvg(behaviour, spikes,'saveMat',true);
placeFieldStats = bz_findPlaceFields1D('firingMaps',firingMaps,'maxSize',.75,'sepEdge',0.03); %% ,'maxSize',.75,'sepEdge',0.03
firingTrialsMap = firingMapPerTrial('force',true);
spatialModulation = getSpatialModulation('force',true);

% if rReward or lReward dots are not clusterized in front of the IRSensor
% position, pray (work in progress)

%% 10. Summary per cell
% Check how many cells have been included for the further analysis
% Also, if substancial changes were done before, run again!!
% (Summary_cell_1, 2 etc). If bad cells, run again. 

plotSummary('showTagCells',true);

% -------------------------------------------------------------------------

%% Sessions with manipulations (CNO and DMSO) 


%If no pulses, go directly to the Power spectrum Profuile function

% getuLEDResponse generates two plots showing, for each neuron detected, 
% how much and by which mLED is activated.The same result is shown using z_score

uLEDResponses = getuLEDResponse('force',true);
uLEDResponses_post = getuLEDResponse('force',true,'restrict_to_manipulation',true);

disp ('uLEDResponses computed!');

% getOptogeneticResponse generates N plots, as N the number of the mLED
% used in the experiment.For each mLED is showed the behaviour of all
% neurons detected trough a raster plot. 

getOptogeneticResponse('numRep',500,'force',true);
getOptogeneticResponse('numRep',500,'force',true,'restrict_to_manipulation',true);

disp ('OptogeneticResponse computed!');

% Three different frequency bands of interest: theta power ( 6-12 Hz), gamma power (20-100 Hz), RHF (100-500 Hz).
% powerSpectrumProfile, for each frequency range, generates a plot. 
% The graph shows for each shank, at the level of each channel present on that shank (y_axis),
% the power of the frequency band being analyzed (x_axis).  

powerSpectrumProfile([6 12],'showfig',true,'forceDetect',true);
powerSpectrumProfile([6 12],'showfig',true,'forceDetect',true,'restrict_to_manipulation',true);

powerSpectrumProfile([20 100],'showfig',true,'forceDetect',true);
powerSpectrumProfile([20 100],'showfig',true,'forceDetect',true,'restrict_to_manipulation',true);

powerSpectrumProfile([100 500],'showfig',true,'forceDetect',true);
powerSpectrumProfile([100 500],'showfig',true,'forceDetect',true,'restrict_to_manipulation',true);

disp ('powerSpectrumProfile computed!');

% spikesPsth is a function that generates a Peri Stimolous Time Histogram
% around an event expressed in 'eventType' and in a time interval. 

spikesPsth([],'eventType','slowOscillations','numRep',500,'force',true,'minNumberOfPulses',10);
spikesPsth([],'eventType','slowOscillations','numRep',500,'force',true,'minNumberOfPulses',10,'restrict_to_manipulation',true);

spikesPsth([],'eventType','ripples','numRep',500,'force',true,'minNumberOfPulses',10);
spikesPsth([],'eventType','ripples','numRep',500,'force',true,'minNumberOfPulses',10,'restrict_to_manipulation',true);

disp('Peri Stimolous Time Histograms computed!');

% computePhaseModulation compute the phase distribution of the firing of
% the neurons for difference frequencies bands. 

computePhaseModulation;
computePhaseModulation('restrict_to_manipulation',true);

disp('PhaseModulation computed!');
 
if ~isempty(dir([session.general.name,'.optogeneticPulses.events.mat']))
    file = dir([session.general.name,'.optogeneticPulses.events.mat']);
    load(file.name);
end

% Getting waveforms of the current session and using the feature explained in CellMetrics website.
% ProcessCellMetrics generates plot about CellMetrics session summary 

% if no pulses, put this variable related to the pulses or to the uLED response equal to []
uLEDResponses = getuLEDResponse;
ProcessCellMetrics('session', session,'forceReload',true,'restrictToIntervals',...
    uLEDResponses.restricted_interval,'manualAdjustMonoSyn',false,'getWaveformsFromDat',false);
cell_metrics = ProcessCellMetrics('session', session, 'forceReload',true,'getWaveformsFromDat',false,...
    'restrictToIntervals',uLEDResponses_post.restricted_interval,'manualAdjustMonoSyn',false,'saveAs','cell_metrics_post');

disp('CellMetrics computed!');

% getACGPeak compute an auto correlation of each neuron in log scale. To
% expand the part of interest. 

getACGPeak('force',true);
getACGPeak('force',true,'restrict_to_manipulation',true);


% getAverageCCG compute, for each neurons detected a cross correlation between itself and 
% all other neurons. The plot show how each neurons is efficiently involved in the network
% activity. 

getAverageCCG('force',true);
getAverageCCG('force',true,'restrict_to_manipulation',true); 

disp('ACGpeak and AvarageCCG computed!');

% getSpikesReturnPlot compute the time distance between one neuron to all
% other nurons using this information as coordinates in the cartesian
% plane.

getSpikesReturnPlot('force',true);
getSpikesReturnPlot('force',true,'restrict_to_manipulation',true);

disp('SpikesReturnPlot computed!');

% getSpeedCorr compute correlation between the speed of the animal and the firing rate
% of each neurons.

getSpeedCorr('numQuantiles',20,'force',true);
getSpeedCorr('numQuantiles',20,'force',true, 'restrict_to_manipulation',true);

disp ('Analysis completed!');
exit



